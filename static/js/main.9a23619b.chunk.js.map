{"version":3,"sources":["components/About.js","components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","useState","color","backgroundColor","myStyle","setMyStyle","btnText","setBtnText","className","id","style","type","onClick","Navbar","props","mode","to","title","aboutText","toggleMode","htmlFor","TextForm","text","setText","heading","placeholder","onChange","event","target","value","rows","newText","toUpperCase","showAlert","toLowerCase","navigator","clipboard","writeText","then","split","join","filter","item","length","Alert","alert","class","role","word","lower","charAt","slice","capitalize","msg","defaultProps","App","setMode","setAlert","message","setTimeout","document","body","changeBgColor","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.9a23619b.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nexport default function About() {\r\n\r\n    // Set light mode by default\r\n    const [myStyle, setMyStyle] = useState({\r\n        color: 'black',\r\n        backgroundColor: 'white'\r\n    });\r\n\r\n    // Set \"Enable Dark Mode\" to button text\r\n    const [btnText, setBtnText] = useState(\"Enable Dark Mode\");\r\n\r\n    // Toggling between Dark and Light Mode\r\n    const toggleStyle = ()=>{\r\n        if(myStyle.color === 'white') {\r\n            setMyStyle({\r\n                color: 'black',\r\n                backgroundColor: 'white'\r\n            });\r\n            setBtnText(\"Enable Dark Mode\");\r\n        } else {\r\n            setMyStyle({\r\n                color: 'white',\r\n                backgroundColor: 'black'\r\n            });\r\n            setBtnText(\"Enable Light Mode\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"accordion\" id=\"accordionExample\">\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                        <button className=\"accordion-button\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                            Accordion Item #1\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                        <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\" style={myStyle}>\r\n                            Accordion Item #2\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                        <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\" style={myStyle}>\r\n                            Accordion Item #3\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"container my-3\">\r\n                <button className=\"btn btn-primary\" onClick={toggleStyle} style={myStyle}>\r\n                    {btnText}\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {Link} from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n\r\n    // const changeBackgrounColor = ()=>{\r\n    //     let bgColor = document.getElementById('bgColor').value;\r\n    //     props.changeBgColor(bgColor)\r\n    // }\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link\" aria-current=\"page\" to=\"/\">Home</Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n                        </li>\r\n                    </ul>\r\n                    {/* <form className=\"d-flex\">\r\n                        <input className=\"form-control me-2\" id=\"bgColor\" type=\"search\" placeholder=\"Enter Color\" aria-label=\"Color\" />\r\n                        <button className=\"btn btn-primary me-2\" onSubmit={changeBackgrounColor} type=\"submit\">Apply</button>\r\n                    </form> */}\r\n                    <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n                        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\" />\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n                    </div>                    \r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n// Prop Type Checking\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string\r\n}\r\n// Setting Default Props if not passed\r\nNavbar.defaultProps = {\r\n    title: \"Title Here...\",\r\n    aboutText: \"About\"\r\n}","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n\r\n    // Convert to Uppercase\r\n    const handleUpClick = ()=>{\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        if(text === ''){\r\n            props.showAlert(\"There is no text to convert.\", \"warning\");\r\n        } else {\r\n            props.showAlert(\"Converted to Uppercase\", \"success\");\r\n        }\r\n    }\r\n    // Convert to Lowercase\r\n    const handleLoClick = ()=>{\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        if(text === ''){\r\n            props.showAlert(\"There is no text to convert.\", \"warning\");\r\n        } else {\r\n            props.showAlert(\"Converted to Lowercase\", \"success\");\r\n        }\r\n    }\r\n    // Remove Extra Spaces\r\n    const handleExtraSpaces = ()=>{\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Removed Extra Spaces\", \"success\");\r\n    }\r\n    //Clear Text\r\n    const handleClearClick = ()=>{\r\n        let newText = '';\r\n        setText(newText);\r\n    }\r\n    // Copy to clipboard\r\n    const handleCopyClick = ()=>{\r\n        if(text === ''){\r\n            props.showAlert(\"There is no text to copy.\", \"warning\");\r\n        } else {\r\n            navigator.clipboard.writeText(text).then(function(){\r\n                props.showAlert(\"Copied to clipboard!\", \"success\");\r\n            });\r\n        }\r\n    }\r\n    // OnChange in TextArea\r\n    const handleChange = (event)=>{\r\n        setText(event.target.value)\r\n    }\r\n\r\n    const [text,setText] = useState('');\r\n    return (\r\n        <>\r\n            <div className=\"container\" style={{color: props.mode==='dark'? 'white' : 'black'}}>\r\n                <h1>{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control\" placeholder=\"Enter your text here...\" style={{backgroundColor: props.mode==='dark'? 'white' : '#042743', color: props.mode==='dark'? 'black' : 'white'}} onChange={handleChange} value={text} id=\"myBox\" rows=\"8\"></textarea>\r\n                </div>\r\n                <button className=\"btn btn-primary mx-3\" onClick={handleUpClick} >Convert to Uppercase</button>\r\n                <button className=\"btn btn-primary mx-3 my-3\" onClick={handleLoClick} >Convert to Lowercase</button>\r\n                <button className=\"btn btn-primary mx-3 my-3\" onClick={handleCopyClick} >Copy to Clipboard</button>\r\n                <button className=\"btn btn-primary mx-3 my-3\" onClick={handleExtraSpaces} >Remove Extra Spaces</button>\r\n                <button className=\"btn btn-danger mx-3 my-3\" onClick={handleClearClick} >Clear Text</button>\r\n            </div>\r\n\r\n            <div className=\"container my-4 mx-1\" style={{color: props.mode==='dark'? 'white' : 'black'}}>\r\n                <h1>Text Summary</h1>\r\n                <p>Number of words: {text.split(\" \").filter(item => item!=='').length} </p>\r\n                <p>Number of characters: {text.length}</p>\r\n                <p>{0.08 * text.split(\" \").filter(item => item!=='').length} minutes read </p>\r\n                <h2>Preview</h2>\r\n                <p>{text}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div class={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            {capitalize(props.alert.type)}: {props.alert.msg}\r\n        </div>\r\n    )\r\n}\r\n","import './App.css';\nimport About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport {useState} from 'react';\nimport Alert from './components/Alert';\nimport React, {Fragment} from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  // Link\n} from \"react-router-dom\";\n\nfunction App() {\n\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n  // const [bgColor, setBgColor] = useState('white')\n\n  const showAlert = (message, type)=>{\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(()=>{\n      setAlert(null)\n    }, 1800);\n  }\n\n  const toggleMode = ()=>{\n    if(mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = 'black';\n      showAlert('Dark Mode Enabled', 'success');\n    } else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert('Light Mode Enabled', 'success');\n    }\n  }\n\n  const changeBgColor = (color)=>{\n    document.body.style.backgroundColor = color;\n  }\n  return (\n      \n      \n        <>\n          {/* Different kind of props passed to the Navbar component */}\n          {/* <Navbar /> */}\n          <Router>\n            <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} changeBgColor={changeBgColor}/>\n            <div className=\"container my-3\">\n            <Alert alert={alert}/>\n            <Switch>\n              {/* Always use exact path, otherwise react router try to match partially.  */}\n              <Route exact path=\"/about\">\n                <About />\n              </Route>\n              <Route exact path=\"/\">\n                <TextForm heading=\"Enter the text to analyze below\" showAlert={showAlert} mode={mode} />\n              </Route>\n            </Switch>\n            </div>\n          </Router>\n        </>\n        \n      \n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}